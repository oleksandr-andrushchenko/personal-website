AWSTemplateFormatVersion: '2010-09-09'
Description: Static Website Hosting with Contact Form Handling via Lambda, SES, SNS

Parameters:
  DomainName:
    Type: String
    Description: e.g. www.example.com
  HostedZoneId:
    Type: String
    Description: Route 53 Hosted Zone ID for your domain
  NotificationEmail:
    Type: String
    Description: Email address to notify on form submission
  NotificationPhone:
    Type: String
    Description: Phone number for SMS (e.g. +15551234567)

Resources:
  SiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref DomainName
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html

  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${DomainName}-oac"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub "${SiteBucket.Arn}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases: [ !Ref DomainName ]
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: s3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [ GET, HEAD ]
          CachedMethods: [ GET, HEAD ]
          ForwardedValues:
            QueryString: false
        Origins:
          - Id: s3Origin
            DomainName: !GetAtt SiteBucket.RegionalDomainName
            S3OriginConfig: { }
            OriginAccessControlId: !GetAtt OriginAccessControl.Id
        ViewerCertificate:
          AcmCertificateArn: !Ref Certificate
          SslSupportMethod: sni-only

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2

  ContactFormTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Protocol: email
          Endpoint: !Ref NotificationEmail
        - Protocol: sms
          Endpoint: !Ref NotificationPhone

  ContactFormLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ContactFormPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref ContactFormTopic
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  ContactFormLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ContactFormHandler
      Handler: index.handler
      Role: !GetAtt ContactFormLambdaRole.Arn
      Runtime: python3.12
      Timeout: 10
      Code:
        ZipFile: !Sub |
          import json
          import boto3

          sns = boto3.client("sns")
          origin = "https://${DomainName}"

          def handler(event, context):
              try:
                  allowed_origin = origin
                  request_origin = event.get("headers", {}).get("origin", "")

                  if request_origin != allowed_origin:
                      return {
                          "statusCode": 403,
                          "headers": {
                              "Access-Control-Allow-Origin": request_origin,
                              "Access-Control-Allow-Methods": "POST,OPTIONS",
                              "Access-Control-Allow-Headers": "Content-Type"
                          },
                          "body": json.dumps({"message": "Forbidden"})
                      }

                  method = event.get("requestContext", {}).get("http", {}).get("method")
                  if method == "OPTIONS":
                      return {
                          "statusCode": 204,
                          "headers": {
                              "Access-Control-Allow-Origin": request_origin,
                              "Access-Control-Allow-Methods": "POST,OPTIONS",
                              "Access-Control-Allow-Headers": "Content-Type"
                          }
                      }

                  body = json.loads(event["body"])
                  name = body.get("name")
                  email = body.get("email")
                  message = body.get("message")

                  if not name or not email or not message:
                      return {
                          "statusCode": 400,
                          "headers": {
                              "Access-Control-Allow-Origin": request_origin,
                              "Access-Control-Allow-Methods": "POST,OPTIONS",
                              "Access-Control-Allow-Headers": "Content-Type"
                          },
                          "body": json.dumps({"message": "Missing form fields"})
                      }

                  text = f"New contact form submission:\nName: {name}\nEmail: {email}\nMessage: {message}"

                  sns.publish(
                      TopicArn="${ContactFormTopic}",
                      Message=text,
                      Subject="New Contact Form Submission"
                  )

                  return {
                      "statusCode": 200,
                      "headers": {
                          "Content-Type": "application/json",
                          "Access-Control-Allow-Origin": request_origin,
                          "Access-Control-Allow-Methods": "POST,OPTIONS",
                          "Access-Control-Allow-Headers": "Content-Type"
                      },
                      "body": json.dumps({"message": "Message sent"})
                  }
              except Exception as e:
                  return {
                      "statusCode": 500,
                      "headers": {
                          "Access-Control-Allow-Origin": request_origin,
                          "Access-Control-Allow-Methods": "POST,OPTIONS",
                          "Access-Control-Allow-Headers": "Content-Type"
                      },
                      "body": json.dumps({"message": str(e)})
                  }

Outputs:
  WebsiteURL:
    Value: !Sub "https://${DomainName}"
  FormLambdaName:
    Value: !Ref ContactFormLambda
  NotificationTopicArn:
    Value: !Ref ContactFormTopic